@startuml
class ѕриложение <<main, injector>> {
  +main()
  #build()
}
class ѕомощникѕо∆ƒѕоездкам {
  +run()
  +показать—траницу–егистрации()
  +показать—траницујвторизации()
  +показать—писокЅилетов()
  +показатьЋичный абинет()
  +показать‘ильтрыѕоЅилетам()
  +показать»сториюѕоездок()
  +показатьѕопул€рныећаршруты()
  +показать»збранныећаршруты()
  
  #on_введеныƒанныеƒл€–егистрации(им€: string, пароль: string, подтверждениеѕарол€: string)
  #on_введеныƒанныеƒл€¬хода(им€: string, пароль: string)
  #on_изменены‘ильтрыѕоЅилетам(значени€: string[])
  #on_запросЌаѕокупкуЅилета(idЅилета: int)
  #on_открытЋичный абинет()
  #on_открыт—писокЅилетов()
  #on_по‘ильтрамЌеЌайденоЅилетов()
  #on_добавлен»збранныйћаршрут()
  #on_удалЄн»збранныйћаршрут()

  #предложить“ранзитныйћаршрут()

  -получитьƒлинућаршрута(номерЅилета: int): int
}
ѕриложение ..> ѕомощникѕо∆ƒѕоездкам: <<create>>
class ѕомощникѕојвторизации {
  +зарегистрироватьЌовогоѕользовател€(им€ѕользовател€: string, пароль: string, подтверждениеѕарол€: string): boolean
  +авторизоватьѕользовател€(им€ѕользовател€: string, пароль: string): boolean
  
  #проверить—уществуетЋиѕользователь(им€ѕользовател€: string)
}
ѕомощникѕо∆ƒѕоездкам "1" --> "1, #помощникѕојвторизации" ѕомощникѕојвторизации
class ѕользователь {
  #номер: int
  #им€: string
  -пароль: string

  +сравнить¬ведЄнныеƒанныеƒл€јвторизации(им€: string, пароль: string): boolean
  +получитьЌомер(): int
  +получить»м€(): string
}
together {
class Ћичный абинет {
  +получитьЌомера»меющихс€Ѕилетов(): int[]
  +получитьЌомераЅилетовѕрошлыхѕоездок(): int[]
  +получить»збранныећаршруты(): int[][]
  +добавить»меющийс€Ѕилет(idЅилета: int): boolean
  +переместить»меющийс€Ѕилет¬ѕрошлыеѕоездки(idЅилета: int): boolean
  +добавить»збранныйћаршрут(idћаршрута: int): boolean
  +удалить»збранныйћаршрут(idћаршрута: int): boolean
}
class Ѕилет {
  #номер: int
  #место: string
  #цена: real
  +получитьЌомер(): int
  +получитьћесто(): string
  +получить÷ену(): real
  +получитьЌомера—танцийћаршрута(): int[]
}
}
ѕомощникѕојвторизации "1" o-- "n, #зарегистрированныеѕользователи" ѕользователь
ѕомощникѕо∆ƒѕоездкам "1" --> "1, #активныйѕользователь" ѕользователь
ѕомощникѕо∆ƒѕоездкам "1" --> "n, #имеющиес€Ѕилеты" Ѕилет
class ћаршрут {
  #номер: int
  +получитьЌомер(): int
}
Ѕилет "1" o-- "1, #маршрут" ћаршрут
class —танци€ {
  #номер: int
  #номера—в€занных—танций: int[]
  #рассто€ниеƒо—в€занных—танций: int[]
  +получитьЌомер(): int
  +получитьЌомера—в€занных—танций(): int[]
  +получить–ассто€ни€ƒо—в€занных—танций(): int[]
}
ћаршрут "n" o-- "n, #станции" —танци€
class ћодель∆елезнойƒороги {
  #граф—танций: [первыйЌомер—танции: int, второйЌомер—танции: int, рассто€ние¬ илометрах: int][]
  +существуетћаршрутћежду—танци€ми(первыйЌомер—танции: int, второйЌомер—танции: int): boolean
  +проложитьћаршрутћежду—танци€ми(первыйЌомер—танции: int, второйЌомер—танции: int): int[]
  +станции—в€заны(первыйЌомер—танции: int, второйЌомер—танции: int): boolean
  +получить–ассто€ниећежду—танци€ми(первыйЌомер—танции: int, второйЌомер—танции: int): int
  +получитьƒлинућаршрута(номера—танций: int[]): int

  #создать√раф—танций()
}
ѕомощникѕо∆ƒѕоездкам "1" ..> "1, #модель∆елезнойƒороги" ћодель∆елезнойƒороги
ћодель∆елезнойƒороги "1" *-- "n, #станции" —танци€
ѕользователь "1" *-- "1, #личный абинет" Ћичный абинет
Ћичный абинет "1" --> "n, #имеющиес€Ѕилеты" Ѕилет
Ћичный абинет "1" --> "n, #билетыѕрошлыхѕоездок" Ѕилет
Ћичный абинет "1" --> "n, #избранныећаршруты" ћаршрут
@enduml